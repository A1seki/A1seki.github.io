<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-22T15:53:16.354Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>曹创</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EF+MVC 三层架构</title>
    <link href="http://example.com/2023/06/22/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2023/06/22/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
    <published>2023-06-22T15:51:33.000Z</published>
    <updated>2023-06-22T15:53:16.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用EF-MVC-三层架构的方式开发项目我自己的基本思路"><a href="#用EF-MVC-三层架构的方式开发项目我自己的基本思路" class="headerlink" title="用EF+MVC 三层架构的方式开发项目我自己的基本思路"></a>用EF+MVC 三层架构的方式开发项目我自己的基本思路</h1><p>使用C#、Entity Framework (EF) 和MVC (Model-View-Controller) 的三层架构是一种常见的方式来开发项目。基本思路是将应用程序划分为三个主要层次：数据访问层（DAL）、业务逻辑层（BLL）和表示层（MVC）。每个层级都有不同的责任和功能。</p><ol><li><p>数据访问层（DAL）：</p><ul><li>数据访问层是与数据库进行交互的层级。</li><li>在DAL中，你需要定义数据库上下文（DbContext）和实体类，用于表示数据库表和关系。</li><li>使用EF的Code First或Database First方法创建数据模型。</li><li>实现仓储类（Repositories），提供对数据库的CRUD（创建、读取、更新、删除）操作。</li><li>仓储类使用DbContext来执行数据库查询和操作。</li></ul></li><li><p>业务逻辑层（BLL）：</p><ul><li>业务逻辑层处理应用程序的业务规则和逻辑。</li><li>在BLL中，你可以定义各种业务逻辑类，用于处理特定的业务操作。</li><li>业务逻辑层依赖于数据访问层，通过调用DAL中的仓储类来获取和操作数据。</li><li>在BLL中，你可以执行数据验证、业务计算、事务管理等操作。</li></ul></li><li><p>表示层（MVC）：</p><ul><li>表示层负责处理用户界面和用户交互。</li><li>使用ASP.NET MVC框架创建控制器和视图。</li><li>控制器接收用户请求，调用BLL中的方法来处理请求。</li><li>控制器从BLL获取数据，并将其传递给视图进行显示。</li><li>视图负责呈现数据，接收用户输入，并将其发送回控制器进行处理。</li></ul></li></ol><p>基于这种架构，每个层级都有明确定义的职责，使代码更易于维护、测试和扩展。DAL负责数据持久化，BLL处理业务逻辑，MVC负责用户界面和交互。这种分层结构提高了代码的可重用性和可扩展性，并促进了团队合作开发。</p><p>新建一个空项目(.NET Framework)<br>类库创建顺序：（方便添加引用）<br>Models &#x3D;&#x3D;&gt; IDAL &#x3D;&#x3D;&gt; DAL &#x3D;&#x3D;&gt; Factory &#x3D;&#x3D;&gt; BLL &#x3D;&#x3D;&gt; API &#x3D;&#x3D;&gt; UI</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models:"></a>Models:</h2><p>拉取数据库（做演示里面只有一个Admins表）</p><p>“Models”中添加”M_Admins”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace Models</span><br><span class="line">&#123;</span><br><span class="line">    using System;</span><br><span class="line">    using System.Collections.Generic;</span><br><span class="line">    </span><br><span class="line">    public partial class M_Admins</span><br><span class="line">    &#123;</span><br><span class="line">        public int ID &#123; get; set; &#125;</span><br><span class="line">        public string UserName &#123; get; set; &#125;</span><br><span class="line">        public string Password &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IDAL"><a href="#IDAL" class="headerlink" title="IDAL:"></a>IDAL:</h2><p>在类库”IDAL”中添加名为”I_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using Models;</span><br><span class="line"></span><br><span class="line">namespace IDAL</span><br><span class="line">&#123;</span><br><span class="line">    public interface IAdmins:IBase&lt;M_Admins&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Admins Login(string username, string password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以添加”IBase”作为公共接口，使其编写其他DAL类更方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace IDAL</span><br><span class="line">&#123;</span><br><span class="line">    public interface IBase&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;T&gt; GetAll();//返回所有的集合</span><br><span class="line">        T FindById(int id);//根据主键查询</span><br><span class="line">        void Add(T entity);//增加</span><br><span class="line">        void Delete(int id);//删除</span><br><span class="line">        void Update(int id, T entity);// 修改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAL"><a href="#DAL" class="headerlink" title="DAL"></a>DAL</h2><p>在类库”DAL”中添加名为”D_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line">namespace DAL</span><br><span class="line">&#123;</span><br><span class="line">    public class D_Admins : IDAL.IAdmins</span><br><span class="line">    &#123;</span><br><span class="line">dbAdmins _db;</span><br><span class="line">public D_Admins()</span><br><span class="line">&#123;</span><br><span class="line">    _db = new dbAdmins();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据ID查询并返回单个管理员的信息</span><br><span class="line">        public List&lt;M_Admins&gt; FindById(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            return _db.M_Admins.Where(x=&gt;x.ID == id).Tolist();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//获取所有管理员的列表</span><br><span class="line">        public List&lt;M_Admins&gt; GetAll()</span><br><span class="line">        &#123;</span><br><span class="line">            return _db.M_Admins.ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//添加一个新的管理员到数据库中</span><br><span class="line">        public void Add(M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            _db.M_Admins.Add(customer);</span><br><span class="line">            _db.SaveChanges();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//根据ID更新现有管理员的信息</span><br><span class="line">        public void Update(int id,M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.M_Admins.Find(id);</span><br><span class="line">    data.UserName = entity.UserName;</span><br><span class="line">    data.PassWord = entity.PassWord;</span><br><span class="line">    _db.SaveChanges();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//根据用户ID删除管理员信息</span><br><span class="line">        public void Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.M_Admins.Find(id);</span><br><span class="line">            if (data != null)</span><br><span class="line">            &#123;</span><br><span class="line">                _db.M_Admins.Remove(data);</span><br><span class="line">                _db.SaveChanges();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//登录</span><br><span class="line">public Admins Login(string username, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.CMRC_Admins.Where(x =&gt; x.UserName == username &amp;&amp; x.PassWord == password);</span><br><span class="line">            return data.FirstOrDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面这个示例中，用于对名为”Admins”的数据库表进行操作。这个类实现了一个名为”IAdmihs”的接口，该接口定义了与用户数据相关的操作。</p><h2 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h2><p>添加”Factory”类库,通过使用这个工厂类，可以在业务层（BLL）或其他需要访问数据层的代码中，通过调用工厂类的方法来获取特定实体的接口实例，从而实现了解耦和灵活性。这样的设计有助于提高代码的可维护性和可测试性，同时也符合依赖倒置原则（DIP）和工厂模式的设计思想。</p><p>在类库”Factory”中添加名为”CreateFactory”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using IDAL;</span><br><span class="line"></span><br><span class="line">namespace Factory</span><br><span class="line">&#123;</span><br><span class="line">    public class CreateFactory</span><br><span class="line">    &#123;</span><br><span class="line">        public static IAdmins GetAdmins()</span><br><span class="line">        &#123;</span><br><span class="line">            return (IAdmins)Assembly.Load(&quot;DAL&quot;).CreateInstance(&quot;DAL.D_Admins&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//如果有其他的表同理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="BLL"><a href="#BLL" class="headerlink" title="BLL"></a>BLL</h2><p>在类库”BLL”中添加名为”B_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">using IDAL;</span><br><span class="line">using Models;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace BLL</span><br><span class="line">&#123;</span><br><span class="line">    public class B_Admins : IAdmins</span><br><span class="line">    &#123;</span><br><span class="line">        public void Add(M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateFactory.GetAdmins().Add(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateFactory.GetAdmins().Delete(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public M_Admins FindById(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().FindById(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;M_Admins&gt; GetAll()</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().GetAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public M_Admins Login(string username, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().Login(username, password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Update(int id, M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">           CreateFactory.GetAdmins().Update(id, entity);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>在空项目中添加 ASP.NET Web应用程序(.NET Framework)名为”API”的新项目</p><p>在自带的”Models”文件夹中添加名为”Admins”和”Result”的类：</p><h3 id="“Admins”"><a href="#“Admins”" class="headerlink" title="“Admins”"></a>“Admins”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Web;</span><br><span class="line"></span><br><span class="line">namespace API.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Admins</span><br><span class="line">    &#123;</span><br><span class="line">public int ID &#123; get; set; &#125;</span><br><span class="line">        public string UserName &#123; get; set; &#125;</span><br><span class="line">        public string Password &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“Result”"><a href="#“Result”" class="headerlink" title="“Result”"></a>“Result”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Web;</span><br><span class="line"></span><br><span class="line">namespace API.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Result&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public Result()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Code &#123; get; set; &#125; = 200;//Code编码</span><br><span class="line">        public string Msg &#123; get; set; &#125; = &quot;ok&quot;;//Msg消息</span><br><span class="line">        public T Data &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Result</span><br><span class="line">    &#123;</span><br><span class="line">        public Result()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Code &#123; get; set; &#125; = 200;//Code编码</span><br><span class="line">        public string Msg &#123; get; set; &#125; = &quot;ok&quot;;//Msg消息</span><br><span class="line">        public object Data &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了两个泛型类 <code>Result&lt;T&gt;</code> 和非泛型类 <code>Result</code>，用于封装 API 接口的响应结果。</p><ul><li><p><code>Result&lt;T&gt;</code> 是一个泛型类，用于封装带有数据的 API 响应结果。它具有以下属性：</p><ul><li><code>Code</code>：表示响应结果的状态码，默认为 200。</li><li><code>Msg</code>：表示响应结果的消息，默认为 “ok”。</li><li><code>Data</code>：表示响应结果的数据部分，类型为泛型参数 <code>T</code>，可以是任意类型。</li></ul></li><li><p><code>Result</code> 是一个非泛型类，用于封装不带数据的 API 响应结果。它具有与 <code>Result&lt;T&gt;</code> 相同的属性，但 <code>Data</code> 属性的类型是 <code>object</code>，可以存储任意类型的数据。</p></li></ul><p>使用泛型类 <code>Result&lt;T&gt;</code> 的优势在于它可以根据具体的数据类型来确定 <code>Data</code> 属性的类型，从而提供类型安全性和更好的代码重用性。通过在定义类时使用泛型参数，可以根据需要将不同类型的数据作为结果进行封装。</p><p>在具体的 API 接口实现中，你可以根据需要选择使用泛型类 <code>Result&lt;T&gt;</code> 或非泛型类 <code>Result</code>。如果接口需要返回特定类型的数据结果，可以使用 <code>Result&lt;T&gt;</code>，并指定泛型参数为对应的数据类型。如果接口不需要返回具体的数据结果，或者需要返回的数据类型是不确定的，可以使用非泛型类 <code>Result</code>。这样可以根据实际情况灵活地选择使用泛型或非泛型的封装类。</p><h3 id="“Controller”"><a href="#“Controller”" class="headerlink" title="“Controller”"></a>“Controller”</h3><p>在”Controllers”的文件夹中添加名为”AdminsControllers”的控制器，包含用于处理API请求的控制器类。</p><p>以下是一个简单的示例，展示了在表示层（MVC）中编写API接口进行增删查改操作的基本实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Web.Http;</span><br><span class="line">using API.Models;</span><br><span class="line">using Models;</span><br><span class="line">using BLL;</span><br><span class="line">using DAL;</span><br><span class="line"></span><br><span class="line">namespace API.Controllers</span><br><span class="line">&#123;</span><br><span class="line">    [RoutePrefix(&quot;Api/Admins&quot;)]</span><br><span class="line">    public class AdminsController : ApiController</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        BLL.B_Admins ba;</span><br><span class="line">        public AdminsController()</span><br><span class="line">        &#123;</span><br><span class="line">            ba = new BLL.B_Admins();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取管理员列表的数据</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;List&quot;)]</span><br><span class="line">        [HttpGet]</span><br><span class="line">        public IHttpActionResult List()</span><br><span class="line">        &#123;</span><br><span class="line">            //var result = new Result&lt;List&lt;Admins&gt;&gt;()</span><br><span class="line">            //&#123;</span><br><span class="line">            //    Data = new B_Admins().GetAll()</span><br><span class="line">            //&#125;;</span><br><span class="line">            //return Json(result);</span><br><span class="line"></span><br><span class="line">            var data = from a in ba.GetAll()</span><br><span class="line">                       select new Products()</span><br><span class="line">                       &#123;</span><br><span class="line">                           ID = a.ID,</span><br><span class="line">                           UserName = a.UserName,</span><br><span class="line">                           PassWord = a.PassWord,</span><br><span class="line">                       &#125;;</span><br><span class="line">            List&lt;Admins&gt; list  = data.ToList();</span><br><span class="line"></span><br><span class="line">            return Ok(new Result&lt;List&lt;Admins&gt;&gt;() &#123; </span><br><span class="line">                Data = list</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 登录</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;管理员名称&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Login&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Login(Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">            var admins = ba.Login(admin.UserName, admin.Password);</span><br><span class="line">            var data = new Admins</span><br><span class="line">            &#123;</span><br><span class="line">                Password = admins.Password,</span><br><span class="line">                UserName = admins.UserName</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var result = new Result&lt;Admins&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Data = data</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            return Json(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        ///注册（添加）新的管理员账号</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Reg&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Reg(M_Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">            ba.Add(admin);</span><br><span class="line">            var result = new Result&lt;Admins&gt;();</span><br><span class="line">            return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 更新</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Update/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Update(int id, M_Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">    var data = ba.FindById(id);</span><br><span class="line">    if(data == null)</span><br><span class="line">    &#123;</span><br><span class="line">        return NotFound();</span><br><span class="line">    &#125;</span><br><span class="line">    data.UserName = admin.UserName;</span><br><span class="line">    data.PassWord = admin.PassWord;</span><br><span class="line"></span><br><span class="line">    ba.Update(data);</span><br><span class="line">    return Ok(data);</span><br><span class="line"></span><br><span class="line">            //new BLL.B_Admins().Update(id, admin);</span><br><span class="line">            //var result = new Result&lt;Admins&gt;();</span><br><span class="line">            //return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 删除</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Delete/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                ba.Delete(id);</span><br><span class="line">                return Ok(new Result());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                return Ok(new Result()</span><br><span class="line">                &#123;</span><br><span class="line">                    Msg=&quot;删除失败，请联系管理员&quot;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 根据管理员的ID查找并返回对应的管理员信息</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Find/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpGet]</span><br><span class="line">        public IHttpActionResult Find(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            var admins = ba.FindById(id);</span><br><span class="line">            var data = new Admins</span><br><span class="line">            &#123;</span><br><span class="line">                id = admins.ID,</span><br><span class="line">                PassWord = admins.PassWord,</span><br><span class="line">                UserName = admins.UserName</span><br><span class="line">            &#125;;</span><br><span class="line">            var result = new Result&lt;Admins&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                Data = data</span><br><span class="line">            &#125;;</span><br><span class="line">            return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 用于支持跨域请求和客户端了解服务器支持的请求方法和选项。</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;List&quot;)]</span><br><span class="line">        [Route(&quot;Login&quot;)]</span><br><span class="line">        [Route(&quot;Reg&quot;)]</span><br><span class="line">        [Route(&quot;Update&quot;)]</span><br><span class="line">        [Route(&quot;Delete&quot;)]</span><br><span class="line">        [Route(&quot;Find&quot;)]</span><br><span class="line">        [HttpOptions]</span><br><span class="line">        public IHttpActionResult OPTIONS()</span><br><span class="line">        &#123;</span><br><span class="line">            return Ok();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用EF-MVC-三层架构的方式开发项目我自己的基本思路&quot;&gt;&lt;a href=&quot;#用EF-MVC-三层架构的方式开发项目我自己的基本思路&quot; class=&quot;headerlink&quot; title=&quot;用EF+MVC 三层架构的方式开发项目我自己的基本思路&quot;&gt;&lt;/a&gt;用EF+M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="http://example.com/2023/06/20/SQL/"/>
    <id>http://example.com/2023/06/20/SQL/</id>
    <published>2023-06-20T07:31:12.000Z</published>
    <updated>2023-06-20T09:01:44.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><p>SQL（Structured Query Language）是一种用于管理关系型数据库系统的语言。它是一种标准化的查询语言，用于在数据库中执行各种操作，例如插入、更新、删除和查询数据。</p><p>SQL提供了一组命令和语法规则，使用户能够与数据库进行交互，执行各种操作来管理数据。通过SQL，用户可以创建数据库、创建表格、定义表格之间的关系、插入数据、更新数据、删除数据以及查询数据。</p><p>SQL语言主要包括以下几个方面的功能：</p><p>1、数据定义语言（DDL）：用于定义和管理数据库对象，如创建表格、修改表格结构、删除表格等操作。</p><p>2、数据操纵语言（DML）：用于对数据库中的数据进行操作，如插入数据、更新数据、删除数据等操作。</p><p>3、数据查询语言（DQL）：用于查询数据库中的数据，如使用SELECT语句来获取满足条件的数据。</p><p>4、数据控制语言（DCL）：用于定义用户访问权限和安全性，如授予或撤销用户对数据库对象的访问权限。</p><p>SQL是一种声明性的语言，用户只需要描述所需的数据结果，而不需要指定具体的操作步骤。数据库系统会根据SQL语句的要求来执行相应的操作，并返回结果。</p><p>SQL语言是关系型数据库管理系统（RDBMS）的核心，被广泛应用于各种数据库系统，如MySQL、Oracle、SQL Server、PostgreSQL等。无论是简单的查询还是复杂的数据库操作，SQL语言都是数据库开发和管理的重要工具。</p><h1 id="sql语句基础的存储过程"><a href="#sql语句基础的存储过程" class="headerlink" title="sql语句基础的存储过程"></a>sql语句基础的存储过程</h1><p>SQL（Structured Query Language）是一种用于管理关系数据库系统的语言。存储过程是一组预定义的SQL语句集合，被命名并存储在数据库中，可通过调用执行。存储过程可以接受输入参数，并返回输出参数，它们可以用于执行复杂的数据库操作、处理业务逻辑和提高性能。</p><p>存储过程由一系列SQL语句组成，这些语句可以包括数据的插入、更新、删除等操作，也可以包括查询语句和控制流语句（如条件判断和循环）。存储过程通常用于解决一些复杂的业务需求，可以被应用程序或其他数据库对象调用。</p><p>存储过程的主要优点包括：</p><p>1、代码复用：存储过程可以在多个地方被调用，避免了重复编写相同的代码。<br>2、安全性：存储过程可以设置访问权限，控制用户对数据库的访问。<br>3、性能优化：存储过程在数据库服务器端执行，可以减少网络通信开销，提高执行效率。<br>4、事务控制：存储过程可以作为一个事务单元，保证数据的一致性和完整性。<br>下面是一个简单的SQL存储过程的示例，用于查询指定部门的员工信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE GetEmployeesByDepartment</span><br><span class="line">    @DepartmentID INT  &lt;!--参数类型--&gt;</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT EmployeeID, FirstName, LastName, Email</span><br><span class="line">    FROM Employees   &lt;!--表名--&gt;</span><br><span class="line">    WHERE DepartmentID = @DepartmentID</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>在这个示例中，存储过程名为”GetEmployeesByDepartment”，它接受一个输入参数”@DepartmentID”，用于指定部门ID。存储过程使用SELECT语句从”Employees”表中查询符合条件的员工信息，并返回结果。</p><p>存储过程的使用可以通过调用它的名称，并提供所需的参数来完成。例如，使用以下语句调用上述示例中的存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC GetEmployeesByDepartment @DepartmentID = 1</span><br></pre></td></tr></table></figure><p>这将返回部门ID为1的员工信息。</p><p>存储过程在数据库开发中具有重要的作用，可以提高开发效率、数据安全性和性能。它们适用于处理复杂的业务逻辑和频繁执行的数据库操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是SQL&quot;&gt;&lt;a href=&quot;#什么是SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是SQL&quot;&gt;&lt;/a&gt;什么是SQL&lt;/h1&gt;&lt;p&gt;SQL（Structured Query Language）是一种用于管理关系型数据库系统的语言。它是一种标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2023/06/18/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2023/06/18/%E6%B5%8B%E8%AF%95/</id>
    <published>2023-06-18T10:10:20.000Z</published>
    <updated>2023-06-20T08:11:40.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>图片测试：</p><p><img src="/img/%E4%BE%9D%E8%95%BE%E5%A8%9C-%E7%A7%8B(%E5%8A%A8%E6%80%81).gif"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;p&gt;代码测试：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/06/18/hello-world/"/>
    <id>http://example.com/2023/06/18/hello-world/</id>
    <published>2023-06-18T06:51:03.673Z</published>
    <updated>2023-06-18T06:51:03.674Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
