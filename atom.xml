<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-26T13:06:40.643Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>曹创</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单的LINQ及SQL查询语句编写</title>
    <link href="http://example.com/2023/06/26/%E7%AE%80%E5%8D%95%E7%9A%84LINQ%E5%8F%8ASQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2023/06/26/%E7%AE%80%E5%8D%95%E7%9A%84LINQ%E5%8F%8ASQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%BC%96%E5%86%99/</id>
    <published>2023-06-26T13:06:12.000Z</published>
    <updated>2023-06-26T13:06:40.643Z</updated>
    
    <content type="html"><![CDATA[<p>当涉及到使用LINQ（Language Integrated Query）或SQL（Structured Query Language）编写查询语句时。</p><h2 id="1-使用LINQ查询语法："><a href="#1-使用LINQ查询语法：" class="headerlink" title="1. 使用LINQ查询语法："></a>1. 使用LINQ查询语法：</h2><p>LINQ提供了一种类似于SQL的查询语法，可以与.NET编程语言（如C#）结合使用。</p><h3 id="示例1：从集合中选择特定条件的元素"><a href="#示例1：从集合中选择特定条件的元素" class="headerlink" title="示例1：从集合中选择特定条件的元素"></a>示例1：从集合中选择特定条件的元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var numbers = new List&lt;int&gt; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</span><br><span class="line"></span><br><span class="line">var evenNumbers = from num in numbers</span><br><span class="line">                  where num % 2 == 0</span><br><span class="line">                  select num;</span><br><span class="line"></span><br><span class="line">foreach (var num in evenNumbers)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例2：连接两个集合并选择特定属性"><a href="#示例2：连接两个集合并选择特定属性" class="headerlink" title="示例2：连接两个集合并选择特定属性"></a>示例2：连接两个集合并选择特定属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var students = new List&lt;Student&gt;</span><br><span class="line">&#123;</span><br><span class="line">    new Student &#123; Id = 1, Name = &quot;John&quot;, Age = 20 &#125;,</span><br><span class="line">    new Student &#123; Id = 2, Name = &quot;Alice&quot;, Age = 22 &#125;,</span><br><span class="line">    new Student &#123; Id = 3, Name = &quot;Bob&quot;, Age = 21 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var courses = new List&lt;Course&gt;</span><br><span class="line">&#123;</span><br><span class="line">    new Course &#123; Id = 1, Name = &quot;Math&quot; &#125;,</span><br><span class="line">    new Course &#123; Id = 2, Name = &quot;Science&quot; &#125;,</span><br><span class="line">    new Course &#123; Id = 3, Name = &quot;English&quot; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var query = from student in students</span><br><span class="line">            join course in courses on student.Id equals course.Id</span><br><span class="line">            select new &#123; student.Name, course.Name &#125;;</span><br><span class="line"></span><br><span class="line">foreach (var result in query)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;&#123;result.Name&#125; - &#123;result.Name&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用LINQ方法语法："><a href="#2-使用LINQ方法语法：" class="headerlink" title="2. 使用LINQ方法语法："></a>2. 使用LINQ方法语法：</h2><p>除了查询语法之外，LINQ还提供了一组方法来进行查询和转换。</p><h3 id="示例1：使用Where和Select方法筛选和选择元素"><a href="#示例1：使用Where和Select方法筛选和选择元素" class="headerlink" title="示例1：使用Where和Select方法筛选和选择元素"></a>示例1：使用Where和Select方法筛选和选择元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var numbers = new List&lt;int&gt; &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</span><br><span class="line"></span><br><span class="line">var evenNumbers = numbers.Where(num =&gt; num % 2 == 0)</span><br><span class="line">                         .Select(num =&gt; num);</span><br><span class="line"></span><br><span class="line">foreach (var num in evenNumbers)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例2：使用Join和Select方法连接和选择属性"><a href="#示例2：使用Join和Select方法连接和选择属性" class="headerlink" title="示例2：使用Join和Select方法连接和选择属性"></a>示例2：使用Join和Select方法连接和选择属性</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> students = <span class="keyword">new</span> List&lt;Student&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Student &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;John&quot;</span>, Age = <span class="number">20</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Student &#123; Id = <span class="number">2</span>, Name = <span class="string">&quot;Alice&quot;</span>, Age = <span class="number">22</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Student &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;Bob&quot;</span>, Age = <span class="number">21</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> courses = <span class="keyword">new</span> List&lt;Course&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> Course &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;Math&quot;</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Course &#123; Id = <span class="number">2</span>, Name = <span class="string">&quot;Science&quot;</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> Course &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;English&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = students.Join(courses,</span><br><span class="line">                           student =&gt; student.Id,</span><br><span class="line">                           course =&gt; course.Id,</span><br><span class="line">                           (student, course) =&gt; <span class="keyword">new</span> &#123; student.Name, course.Name &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> result <span class="keyword">in</span> query)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;result.Name&#125;</span> - <span class="subst">&#123;result.Name&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SQL查询语句："><a href="#3-SQL查询语句：" class="headerlink" title="3. SQL查询语句："></a>3. SQL查询语句：</h2><p>如果您使用的是SQL数据库，可以使用SQL查询语句直接与数据库交互。</p><h3 id="示例1：选择所有行和列"><a href="#示例1：选择所有行和列" class="headerlink" title="示例1：选择所有行和列"></a>示例1：选择所有行和列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string query = &quot;SELECT * FROM TableName&quot;;</span><br><span class="line"></span><br><span class="line">using (var connection =</span><br><span class="line"></span><br><span class="line"> new SqlConnection(connectionString))</span><br><span class="line">&#123;</span><br><span class="line">    connection.Open();</span><br><span class="line">    using (var command = new SqlCommand(query, connection))</span><br><span class="line">    &#123;</span><br><span class="line">        using (var reader = command.ExecuteReader())</span><br><span class="line">        &#123;</span><br><span class="line">            while (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                // 处理每一行数据</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例2：选择特定条件的行和列"><a href="#示例2：选择特定条件的行和列" class="headerlink" title="示例2：选择特定条件的行和列"></a>示例2：选择特定条件的行和列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">string query = &quot;SELECT Column1, Column2 FROM TableName WHERE Condition&quot;;</span><br><span class="line"></span><br><span class="line">using (var connection = new SqlConnection(connectionString))</span><br><span class="line">&#123;</span><br><span class="line">    connection.Open();</span><br><span class="line">    using (var command = new SqlCommand(query, connection))</span><br><span class="line">    &#123;</span><br><span class="line">        using (var reader = command.ExecuteReader())</span><br><span class="line">        &#123;</span><br><span class="line">            while (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                // 处理每一行数据</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，上述示例仅为了演示目的，并可能需要根据您的实际情况进行修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当涉及到使用LINQ（Language Integrated Query）或SQL（Structured Query Language）编写查询语句时。&lt;/p&gt;
&lt;h2 id=&quot;1-使用LINQ查询语法：&quot;&gt;&lt;a href=&quot;#1-使用LINQ查询语法：&quot; class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第三方API接口对接</title>
    <link href="http://example.com/2023/06/26/%E7%AC%AC%E4%B8%89%E6%96%B9API%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%8E%A5/"/>
    <id>http://example.com/2023/06/26/%E7%AC%AC%E4%B8%89%E6%96%B9API%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%8E%A5/</id>
    <published>2023-06-26T10:18:36.000Z</published>
    <updated>2023-06-26T10:19:24.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三方API接口对接"><a href="#第三方API接口对接" class="headerlink" title="第三方API接口对接"></a>第三方API接口对接</h1><p>第三方API接口对接是将您的应用程序或系统与第三方服务或平台进行集成，以实现功能联动和数据交换。以下是进行第三方API接口对接的一般步骤：</p><ol><li><p>确定需求和目标：明确您希望通过API接口对接实现的具体功能和目标。了解第三方服务的功能和提供的API文档，确定需要使用的API端点和数据交换格式。</p></li><li><p>获取API访问凭证：注册并获取第三方服务的API密钥、令牌或其他访问凭证。这些凭证将用于身份验证和授权您的应用程序访问第三方API。</p></li><li><p>API文档和规范：仔细阅读第三方API的文档和规范。了解API的使用方法、请求和响应的数据结构，以及任何限制或注意事项。</p></li><li><p>开发和编码：使用您选择的编程语言和框架，编写代码来调用和处理第三方API。根据API文档中提供的请求方法（如GET、POST、PUT等）构建请求，将必要的参数和数据传递给API，并处理返回的响应数据。</p></li><li><p>身份验证和授权：根据第三方API的要求，实现身份验证和授权机制。这可能涉及在API请求中包含访问凭证、令牌或密钥，并处理任何身份验证错误或令牌刷新。</p></li><li><p>数据交换和处理：将您的应用程序的数据与第三方API进行交换。这可能包括发送数据给API，从API获取数据，或者将应用程序的数据与API中的数据进行同步。</p></li><li><p>错误处理和异常情况：处理第三方API调用过程中可能出现的错误和异常情况。这包括处理网络连接问题、处理API错误响应和异常状态码等。</p></li><li><p>测试和调试：在对接过程中进行测试和调试，确保API调用和数据交换的正确性。使用适当的测试数据和情景，检查返回数据的准确性和一致性。</p></li><li><p>监控和维护：在实际使用过程中，监控API调用的性能和稳定性。定期检查API文档和版本更新，以确保对接的API仍然有效并符合您的需求。</p></li></ol><p>请注意，每个第三方API都有其特定的要求和文档，因此确保仔细阅读和理解API文档是非常重要的。有时可能需要与第三方服务提供商的支持团队进行沟通，以获取进一步的指导和支持。</p><h1 id="用C-编写代码对接第三方API时，可以使用-NET的HttpClient类来发送HTTP请求。以下是一个使用C-编写的示例代码："><a href="#用C-编写代码对接第三方API时，可以使用-NET的HttpClient类来发送HTTP请求。以下是一个使用C-编写的示例代码：" class="headerlink" title="用C#编写代码对接第三方API时，可以使用.NET的HttpClient类来发送HTTP请求。以下是一个使用C#编写的示例代码："></a>用C#编写代码对接第三方API时，可以使用.NET的HttpClient类来发送HTTP请求。以下是一个使用C#编写的示例代码：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Net.Http.Headers;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static HttpClient client = new HttpClient();          //静态的 HttpClient 对象 client</span><br><span class="line"></span><br><span class="line">    static async void CallApi()</span><br><span class="line">    &#123;</span><br><span class="line">        string apiKey = &quot;your_api_key&quot;;</span><br><span class="line">        string apiEndpoint = &quot;https://api.example.com/endpoint&quot;;</span><br><span class="line"></span><br><span class="line">        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(&quot;Bearer&quot;, apiKey);      // 请求的授权头部信息</span><br><span class="line"> </span><br><span class="line">        HttpResponseMessage response = await client.GetAsync(apiEndpoint);   //使用 HttpClient 对象发送一个异步的 GET 请求到指定的 apiEndpoint</span><br><span class="line"></span><br><span class="line">        if (response.IsSuccessStatusCode)   //用于检查 HTTP 请求是否成功的条件之一</span><br><span class="line">        &#123;</span><br><span class="line">            string data = await response.Content.ReadAsStringAsync();   //一个异步方法，用于读取 HTTP 响应的内容并将其作为字符串返回</span><br><span class="line">            // 处理返回的数据</span><br><span class="line">            ProcessData(data);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;API请求失败: &quot; + response.StatusCode);   //获取 HTTP 响应的状态码</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void ProcessData(string data)        //编写自己的逻辑来处理数据</span><br><span class="line">    &#123;</span><br><span class="line">        // 在这里编写处理数据的逻辑</span><br><span class="line">        // 示例：打印返回数据</span><br><span class="line">        Console.WriteLine(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void Main(string[] args)         //接收从命令行传递的参数</span><br><span class="line">    &#123;</span><br><span class="line">        CallApi();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了C#的HttpClient类来发送GET请求到API。我们设置了请求头的Authorization字段，将API密钥作为Bearer令牌的一部分传递。</p><p>通过调用<code>client.GetAsync(apiEndpoint)</code>方法发送请求，并等待响应。如果响应的状态码表示成功（IsSuccessStatusCode为true），我们通过调用<code>response.Content.ReadAsStringAsync()</code>方法将响应的内容读取为字符串，并将其传递给<code>ProcessData()</code>函数进行进一步处理。</p><p>在<code>ProcessData()</code>函数中，您可以根据API返回的数据结构编写特定的逻辑来处理数据。在这个示例中，我们只是简单地打印返回的数据。</p><p>请注意，这只是一个简单的示例，具体的代码和逻辑将根据您要对接的第三方API的要求和数据结构而有所不同。确保根据API文档进行适当的身份验证、参数传递和数据处理。</p><h2 id="静态的-HttpClient-对象-client"><a href="#静态的-HttpClient-对象-client" class="headerlink" title="静态的 HttpClient 对象 client"></a>静态的 HttpClient 对象 client</h2><p><code>static HttpClient client = new HttpClient();</code> 这行代码定义了一个静态的 <code>HttpClient</code> 对象 <code>client</code>。<code>HttpClient</code> 是用于发送 HTTP 请求的类，使用静态对象可以在整个应用程序中共享同一个 <code>HttpClient</code> 实例，以提高性能和资源利用率。</p><p>在实际应用中，使用单个 <code>HttpClient</code> 实例可以实现连接的复用和保持活动的 TCP 连接，避免了频繁创建和销毁连接的开销。这对于多个请求的场景（如对接第三方API）特别有用。</p><p>通过将 <code>HttpClient</code> 实例设置为静态，可以确保在整个应用程序的生命周期内只有一个实例，而不需要每次请求都创建新的 <code>HttpClient</code> 对象。这样可以节省资源并提高性能。</p><p>请注意，使用静态 <code>HttpClient</code> 实例时需要注意线程安全性。在多线程环境中使用静态 <code>HttpClient</code> 时，需要采取适当的线程同步措施或使用异步方法来确保线程安全性。</p><h2 id="请求的授权头部信息"><a href="#请求的授权头部信息" class="headerlink" title="请求的授权头部信息"></a>请求的授权头部信息</h2><p><code>client.DefaultRequestHeaders.Authorization</code> 是 <code>HttpClient</code> 对象的属性，它表示请求的授权头部信息。</p><p>在给定的代码行中，我们使用 <code>AuthenticationHeaderValue</code> 类创建了一个授权头部信息，并将其赋值给 <code>client.DefaultRequestHeaders.Authorization</code>。这意味着我们将在发送的每个请求的头部中添加授权信息。</p><p><code>AuthenticationHeaderValue</code> 是一个表示 HTTP 请求授权头部的类。它接受两个参数：授权类型和令牌值。在这里，我们使用 “Bearer” 作为授权类型，并将 <code>apiKey</code> 的值作为令牌值。Bearer 授权类型通常用于身份验证和授权机制，而令牌值是用于验证请求的有效性的凭证。</p><p>通过将授权信息添加到 <code>client.DefaultRequestHeaders.Authorization</code>，我们告诉 <code>HttpClient</code> 在发送请求时在头部中包含相应的授权信息，以便目标 API 服务可以验证和识别请求的身份。</p><p>请注意，授权头部的具体格式和要求会根据所使用的授权机制和目标 API 的要求而有所不同。在实际应用中，您需要根据具体的 API 文档和要求来设置适当的授权头部信息。</p><h2 id="使用-HttpClient-对象发送一个异步的-GET-请求到指定的-apiEndpoint"><a href="#使用-HttpClient-对象发送一个异步的-GET-请求到指定的-apiEndpoint" class="headerlink" title="使用 HttpClient 对象发送一个异步的 GET 请求到指定的 apiEndpoint"></a>使用 HttpClient 对象发送一个异步的 GET 请求到指定的 apiEndpoint</h2><p><code>HttpResponseMessage response = await client.GetAsync(apiEndpoint);</code> 这行代码是使用 <code>HttpClient</code> 对象发送一个异步的 GET 请求到指定的 <code>apiEndpoint</code>。</p><p>解释如下：</p><ul><li><code>client</code> 是我们之前创建的 <code>HttpClient</code> 对象，用于发送 HTTP 请求。</li><li><code>GetAsync(apiEndpoint)</code> 是 <code>HttpClient</code> 类提供的一个异步方法，用于发送 GET 请求到指定的 URL，这里的 <code>apiEndpoint</code> 是 API 的终端地址。</li><li><code>await</code> 关键字用于异步等待，确保请求能够异步执行，而不会阻塞主线程。</li><li><code>GetAsync</code> 方法会返回一个表示 HTTP 响应的 <code>HttpResponseMessage</code> 对象。</li><li><code>HttpResponseMessage response</code> 是我们定义的一个变量，用于存储异步请求的结果，即 HTTP 响应。</li></ul><p>通过上述代码，我们发送了一个异步的 GET 请求到指定的 API 终端地址，并将响应保存在 <code>response</code> 变量中，以便进一步处理响应的内容。</p><p>接下来，您可以根据需要，通过 <code>response</code> 对象访问响应的状态码、头部信息、响应内容等，以便进一步处理和解析返回的数据。</p><p>请注意，由于 <code>GetAsync</code> 方法是异步的，因此我们使用了 <code>await</code> 关键字来确保在收到响应之前，程序不会继续执行下一行代码。这样可以保证我们能够正确处理异步请求的结果。</p><h2 id="一个异步方法，用于读取-HTTP-响应的内容并将其作为字符串返回"><a href="#一个异步方法，用于读取-HTTP-响应的内容并将其作为字符串返回" class="headerlink" title="一个异步方法，用于读取 HTTP 响应的内容并将其作为字符串返回"></a>一个异步方法，用于读取 HTTP 响应的内容并将其作为字符串返回</h2><p><code>response.Content.ReadAsStringAsync()</code> 是一个异步方法，用于读取 HTTP 响应的内容并将其作为字符串返回。</p><p>在给定的代码行中，我们调用了 <code>response.Content.ReadAsStringAsync()</code> 方法，并使用 <code>await</code> 关键字等待异步读取操作完成。读取操作完成后，将响应内容作为字符串赋值给 <code>data</code> 变量。</p><p><code>ReadAsStringAsync()</code> 方法是 <code>HttpContent</code> 类的一个扩展方法，它返回一个 <code>Task&lt;string&gt;</code>，表示一个异步操作，该操作将响应内容读取为字符串。</p><p>通过调用 <code>response.Content.ReadAsStringAsync()</code>，我们可以获取到响应的内容，并将其作为字符串进行进一步处理。这在处理 API 响应、解析返回的数据等情况下非常常见。</p><p>以下是一个简单的示例，演示如何使用 <code>ReadAsStringAsync()</code> 方法读取响应内容：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(apiEndpoint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> data = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;响应内容: &quot;</span> + data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;请求失败: &quot;</span> + response.StatusCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，如果请求成功 (<code>response.IsSuccessStatusCode</code> 为 <code>true</code>)，我们通过调用 <code>response.Content.ReadAsStringAsync()</code> 读取响应内容，并将其存储在 <code>data</code> 变量中。然后，我们可以根据需要对响应内容进行解析、处理和展示。</p><p>请注意，根据实际情况，您可能需要使用适当的编码方式对响应内容进行解码，以确保正确处理非 ASCII 字符或特殊字符。</p><h2 id="获取-HTTP-响应的状态码"><a href="#获取-HTTP-响应的状态码" class="headerlink" title="获取 HTTP 响应的状态码"></a>获取 HTTP 响应的状态码</h2><p><code>response.StatusCode</code> 是 <code>HttpResponseMessage</code> 对象的属性，用于获取 HTTP 响应的状态码。</p><p><code>StatusCode</code> 属性返回一个枚举值，表示 HTTP 响应的状态。该枚举类型是 <code>System.Net.HttpStatusCode</code>，它定义了一系列常见的 HTTP 状态码，如 200 OK、404 Not Found、500 Internal Server Error 等。</p><p>通过检查 <code>response.StatusCode</code>，您可以了解到服务器对请求的处理结果。根据不同的状态码，您可以采取不同的处理逻辑，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(apiEndpoint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;请求成功: &quot;</span> + (<span class="built_in">int</span>)response.StatusCode + <span class="string">&quot; &quot;</span> + response.StatusCode.ToString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (response.StatusCode == HttpStatusCode.NotFound)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 请求的资源未找到</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;请求的资源未找到: &quot;</span> + (<span class="built_in">int</span>)response.StatusCode + <span class="string">&quot; &quot;</span> + response.StatusCode.ToString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (response.StatusCode == HttpStatusCode.Unauthorized)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 未经授权的请求</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;未经授权的请求: &quot;</span> + (<span class="built_in">int</span>)response.StatusCode + <span class="string">&quot; &quot;</span> + response.StatusCode.ToString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其他情况</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;其他状态码: &quot;</span> + (<span class="built_in">int</span>)response.StatusCode + <span class="string">&quot; &quot;</span> + response.StatusCode.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先检查 <code>response.IsSuccessStatusCode</code> 来判断是否请求成功。如果成功，我们输出状态码和状态描述。然后，我们针对一些常见的状态码，如 404 Not Found 和 401 Unauthorized，进行额外的处理。</p><p>根据具体的业务需求和目标 API 的定义，您可以根据不同的状态码采取适当的处理逻辑，例如重试、重新发送请求、解析错误信息等。</p><p>请注意，HTTP 状态码是由服务器返回的，它们表示服务器对请求的处理结果。不同的状态码有不同的含义，您可以参考 HTTP 规范和目标 API 的文档，了解每个状态码的具体含义和推荐的处理方式。</p><h2 id="编写自己的逻辑来处理数据"><a href="#编写自己的逻辑来处理数据" class="headerlink" title="编写自己的逻辑来处理数据"></a>编写自己的逻辑来处理数据</h2><p><code>ProcessData</code> 是一个静态方法，用于处理数据。在给定的代码中，<code>ProcessData</code> 方法接收一个 <code>data</code> 参数，该参数是一个字符串类型的数据。</p><p>在方法体中，您可以编写自己的逻辑来处理数据。示例中的代码只是一个简单的示例，它将传入的 <code>data</code> 参数打印到控制台上。</p><p>这个方法可以根据您的具体需求进行扩展和修改。您可以在 <code>ProcessData</code> 方法中执行各种操作，例如解析数据、转换格式、存储到数据库、发送到其他系统等。具体的处理逻辑取决于您的业务需求和数据处理的目标。</p><p>以下是一个简单的示例，展示如何扩展 <code>ProcessData</code> 方法来解析 JSON 格式的数据：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessData</span>(<span class="params"><span class="built_in">string</span> data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 假设 data 是一个包含 JSON 格式的字符串</span></span><br><span class="line">    <span class="comment">// 在这里解析 JSON 数据并处理</span></span><br><span class="line">    <span class="keyword">var</span> jsonObject = JsonConvert.DeserializeObject(data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据解析后的对象执行其他操作</span></span><br><span class="line">    <span class="comment">// 示例：获取特定属性的值</span></span><br><span class="line">    <span class="keyword">var</span> name = jsonObject[<span class="string">&quot;name&quot;</span>].ToString();</span><br><span class="line">    </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;解析后的数据：&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了 Json.NET 库（Newtonsoft.Json）来解析 JSON 格式的数据。您可以根据具体的需求选择适合您的数据处理库或方法。</p><p>请记住，<code>ProcessData</code> 方法只是一个示例，您可以根据自己的需求自定义处理逻辑。根据实际情况，您可能需要添加错误处理、数据验证、异常处理等逻辑来确保数据的正确性和稳定性。</p><h2 id="接收从命令行传递的参数"><a href="#接收从命令行传递的参数" class="headerlink" title="接收从命令行传递的参数"></a>接收从命令行传递的参数</h2><p><code>Main</code> 方法是C#程序的入口点，是程序的起始执行位置。</p><p>在给定的代码中，<code>Main</code> 方法接受一个 <code>string</code> 数组参数 <code>args</code>，用于接收从命令行传递的参数。</p><p>在 <code>Main</code> 方法的方法体中，首先调用了 <code>CallApi()</code> 方法，该方法可能包含了与 API 的交互和数据处理的逻辑。然后，调用了 <code>Console.ReadLine()</code> 方法，用于在控制台中等待用户输入，以便在程序执行完毕前保持控制台窗口的打开状态。</p><p>总结起来，这段代码的意思是，在程序启动时先调用 <code>CallApi()</code> 方法执行一些操作，然后等待用户在控制台中输入内容，直到用户按下 Enter 键，程序才会终止执行。</p><p>这种编写方式常见于控制台应用程序，可以在控制台中观察程序的输出结果，并与用户进行交互。在实际应用中，您可以根据需要在 <code>Main</code> 方法中添加其他的逻辑和功能。</p><h2 id="总体来说，实现-API-接口对接的最简单描述如下："><a href="#总体来说，实现-API-接口对接的最简单描述如下：" class="headerlink" title="总体来说，实现 API 接口对接的最简单描述如下："></a>总体来说，实现 API 接口对接的最简单描述如下：</h2><ol><li><p>确定接口规范：了解目标 API 的文档或说明，确定请求的 URL、HTTP 方法（如 GET、POST）、参数、数据格式等。</p></li><li><p>创建 HTTP 客户端：在代码中创建一个 HTTP 客户端对象，如 HttpClient，用于发送 HTTP 请求和接收响应。</p></li><li><p>发送请求：使用 HTTP 客户端发送请求到目标 API 的 URL，包括设置请求方法、请求头、请求参数、请求体等。</p></li><li><p>接收响应：从目标 API 接收到响应，包括获取响应状态码、响应头、响应体等。</p></li><li><p>解析响应：根据目标 API 返回的数据格式（如 JSON、XML），解析响应体中的数据，并根据需要进行处理和存储。</p></li><li><p>错误处理：检查响应状态码和错误信息，根据情况处理请求失败、网络错误或其他异常情况。</p></li></ol><p>以上是一个简单的步骤示例，涵盖了实现 API 接口对接的基本过程。具体实现可能需要根据目标 API 的要求和所用编程语言的特点进行调整。</p><p>此外，对接 API 还可能涉及身份验证、授权、数据加密等安全措施的实施。具体的实现方式和步骤将取决于目标 API 的要求和应用程序的需求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三方API接口对接&quot;&gt;&lt;a href=&quot;#第三方API接口对接&quot; class=&quot;headerlink&quot; title=&quot;第三方API接口对接&quot;&gt;&lt;/a&gt;第三方API接口对接&lt;/h1&gt;&lt;p&gt;第三方API接口对接是将您的应用程序或系统与第三方服务或平台进行集成，以实现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EF+MVC 三层架构</title>
    <link href="http://example.com/2023/06/22/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2023/06/22/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
    <published>2023-06-22T15:51:33.000Z</published>
    <updated>2023-06-22T15:53:16.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用EF-MVC-三层架构的方式开发项目我自己的基本思路"><a href="#用EF-MVC-三层架构的方式开发项目我自己的基本思路" class="headerlink" title="用EF+MVC 三层架构的方式开发项目我自己的基本思路"></a>用EF+MVC 三层架构的方式开发项目我自己的基本思路</h1><p>使用C#、Entity Framework (EF) 和MVC (Model-View-Controller) 的三层架构是一种常见的方式来开发项目。基本思路是将应用程序划分为三个主要层次：数据访问层（DAL）、业务逻辑层（BLL）和表示层（MVC）。每个层级都有不同的责任和功能。</p><ol><li><p>数据访问层（DAL）：</p><ul><li>数据访问层是与数据库进行交互的层级。</li><li>在DAL中，你需要定义数据库上下文（DbContext）和实体类，用于表示数据库表和关系。</li><li>使用EF的Code First或Database First方法创建数据模型。</li><li>实现仓储类（Repositories），提供对数据库的CRUD（创建、读取、更新、删除）操作。</li><li>仓储类使用DbContext来执行数据库查询和操作。</li></ul></li><li><p>业务逻辑层（BLL）：</p><ul><li>业务逻辑层处理应用程序的业务规则和逻辑。</li><li>在BLL中，你可以定义各种业务逻辑类，用于处理特定的业务操作。</li><li>业务逻辑层依赖于数据访问层，通过调用DAL中的仓储类来获取和操作数据。</li><li>在BLL中，你可以执行数据验证、业务计算、事务管理等操作。</li></ul></li><li><p>表示层（MVC）：</p><ul><li>表示层负责处理用户界面和用户交互。</li><li>使用ASP.NET MVC框架创建控制器和视图。</li><li>控制器接收用户请求，调用BLL中的方法来处理请求。</li><li>控制器从BLL获取数据，并将其传递给视图进行显示。</li><li>视图负责呈现数据，接收用户输入，并将其发送回控制器进行处理。</li></ul></li></ol><p>基于这种架构，每个层级都有明确定义的职责，使代码更易于维护、测试和扩展。DAL负责数据持久化，BLL处理业务逻辑，MVC负责用户界面和交互。这种分层结构提高了代码的可重用性和可扩展性，并促进了团队合作开发。</p><p>新建一个空项目(.NET Framework)<br>类库创建顺序：（方便添加引用）<br>Models &#x3D;&#x3D;&gt; IDAL &#x3D;&#x3D;&gt; DAL &#x3D;&#x3D;&gt; Factory &#x3D;&#x3D;&gt; BLL &#x3D;&#x3D;&gt; API &#x3D;&#x3D;&gt; UI</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models:"></a>Models:</h2><p>拉取数据库（做演示里面只有一个Admins表）</p><p>“Models”中添加”M_Admins”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace Models</span><br><span class="line">&#123;</span><br><span class="line">    using System;</span><br><span class="line">    using System.Collections.Generic;</span><br><span class="line">    </span><br><span class="line">    public partial class M_Admins</span><br><span class="line">    &#123;</span><br><span class="line">        public int ID &#123; get; set; &#125;</span><br><span class="line">        public string UserName &#123; get; set; &#125;</span><br><span class="line">        public string Password &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IDAL"><a href="#IDAL" class="headerlink" title="IDAL:"></a>IDAL:</h2><p>在类库”IDAL”中添加名为”I_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using Models;</span><br><span class="line"></span><br><span class="line">namespace IDAL</span><br><span class="line">&#123;</span><br><span class="line">    public interface IAdmins:IBase&lt;M_Admins&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Admins Login(string username, string password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以添加”IBase”作为公共接口，使其编写其他DAL类更方便：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace IDAL</span><br><span class="line">&#123;</span><br><span class="line">    public interface IBase&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;T&gt; GetAll();//返回所有的集合</span><br><span class="line">        T FindById(int id);//根据主键查询</span><br><span class="line">        void Add(T entity);//增加</span><br><span class="line">        void Delete(int id);//删除</span><br><span class="line">        void Update(int id, T entity);// 修改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAL"><a href="#DAL" class="headerlink" title="DAL"></a>DAL</h2><p>在类库”DAL”中添加名为”D_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line">namespace DAL</span><br><span class="line">&#123;</span><br><span class="line">    public class D_Admins : IDAL.IAdmins</span><br><span class="line">    &#123;</span><br><span class="line">dbAdmins _db;</span><br><span class="line">public D_Admins()</span><br><span class="line">&#123;</span><br><span class="line">    _db = new dbAdmins();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据ID查询并返回单个管理员的信息</span><br><span class="line">        public List&lt;M_Admins&gt; FindById(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            return _db.M_Admins.Where(x=&gt;x.ID == id).Tolist();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//获取所有管理员的列表</span><br><span class="line">        public List&lt;M_Admins&gt; GetAll()</span><br><span class="line">        &#123;</span><br><span class="line">            return _db.M_Admins.ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//添加一个新的管理员到数据库中</span><br><span class="line">        public void Add(M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            _db.M_Admins.Add(customer);</span><br><span class="line">            _db.SaveChanges();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//根据ID更新现有管理员的信息</span><br><span class="line">        public void Update(int id,M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.M_Admins.Find(id);</span><br><span class="line">    data.UserName = entity.UserName;</span><br><span class="line">    data.PassWord = entity.PassWord;</span><br><span class="line">    _db.SaveChanges();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//根据用户ID删除管理员信息</span><br><span class="line">        public void Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.M_Admins.Find(id);</span><br><span class="line">            if (data != null)</span><br><span class="line">            &#123;</span><br><span class="line">                _db.M_Admins.Remove(data);</span><br><span class="line">                _db.SaveChanges();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//登录</span><br><span class="line">public Admins Login(string username, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = _db.CMRC_Admins.Where(x =&gt; x.UserName == username &amp;&amp; x.PassWord == password);</span><br><span class="line">            return data.FirstOrDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面这个示例中，用于对名为”Admins”的数据库表进行操作。这个类实现了一个名为”IAdmihs”的接口，该接口定义了与用户数据相关的操作。</p><h2 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h2><p>添加”Factory”类库,通过使用这个工厂类，可以在业务层（BLL）或其他需要访问数据层的代码中，通过调用工厂类的方法来获取特定实体的接口实例，从而实现了解耦和灵活性。这样的设计有助于提高代码的可维护性和可测试性，同时也符合依赖倒置原则（DIP）和工厂模式的设计思想。</p><p>在类库”Factory”中添加名为”CreateFactory”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using IDAL;</span><br><span class="line"></span><br><span class="line">namespace Factory</span><br><span class="line">&#123;</span><br><span class="line">    public class CreateFactory</span><br><span class="line">    &#123;</span><br><span class="line">        public static IAdmins GetAdmins()</span><br><span class="line">        &#123;</span><br><span class="line">            return (IAdmins)Assembly.Load(&quot;DAL&quot;).CreateInstance(&quot;DAL.D_Admins&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//如果有其他的表同理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="BLL"><a href="#BLL" class="headerlink" title="BLL"></a>BLL</h2><p>在类库”BLL”中添加名为”B_Admins”的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">using IDAL;</span><br><span class="line">using Models;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace BLL</span><br><span class="line">&#123;</span><br><span class="line">    public class B_Admins : IAdmins</span><br><span class="line">    &#123;</span><br><span class="line">        public void Add(M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateFactory.GetAdmins().Add(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateFactory.GetAdmins().Delete(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public M_Admins FindById(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().FindById(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;M_Admins&gt; GetAll()</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().GetAll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public M_Admins Login(string username, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            return CreateFactory.GetAdmins().Login(username, password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Update(int id, M_Admins entity)</span><br><span class="line">        &#123;</span><br><span class="line">           CreateFactory.GetAdmins().Update(id, entity);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>在空项目中添加 ASP.NET Web应用程序(.NET Framework)名为”API”的新项目</p><p>在自带的”Models”文件夹中添加名为”Admins”和”Result”的类：</p><h3 id="“Admins”"><a href="#“Admins”" class="headerlink" title="“Admins”"></a>“Admins”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Web;</span><br><span class="line"></span><br><span class="line">namespace API.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Admins</span><br><span class="line">    &#123;</span><br><span class="line">public int ID &#123; get; set; &#125;</span><br><span class="line">        public string UserName &#123; get; set; &#125;</span><br><span class="line">        public string Password &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“Result”"><a href="#“Result”" class="headerlink" title="“Result”"></a>“Result”</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Web;</span><br><span class="line"></span><br><span class="line">namespace API.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Result&lt;T&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public Result()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Code &#123; get; set; &#125; = 200;//Code编码</span><br><span class="line">        public string Msg &#123; get; set; &#125; = &quot;ok&quot;;//Msg消息</span><br><span class="line">        public T Data &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Result</span><br><span class="line">    &#123;</span><br><span class="line">        public Result()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Code &#123; get; set; &#125; = 200;//Code编码</span><br><span class="line">        public string Msg &#123; get; set; &#125; = &quot;ok&quot;;//Msg消息</span><br><span class="line">        public object Data &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了两个泛型类 <code>Result&lt;T&gt;</code> 和非泛型类 <code>Result</code>，用于封装 API 接口的响应结果。</p><ul><li><p><code>Result&lt;T&gt;</code> 是一个泛型类，用于封装带有数据的 API 响应结果。它具有以下属性：</p><ul><li><code>Code</code>：表示响应结果的状态码，默认为 200。</li><li><code>Msg</code>：表示响应结果的消息，默认为 “ok”。</li><li><code>Data</code>：表示响应结果的数据部分，类型为泛型参数 <code>T</code>，可以是任意类型。</li></ul></li><li><p><code>Result</code> 是一个非泛型类，用于封装不带数据的 API 响应结果。它具有与 <code>Result&lt;T&gt;</code> 相同的属性，但 <code>Data</code> 属性的类型是 <code>object</code>，可以存储任意类型的数据。</p></li></ul><p>使用泛型类 <code>Result&lt;T&gt;</code> 的优势在于它可以根据具体的数据类型来确定 <code>Data</code> 属性的类型，从而提供类型安全性和更好的代码重用性。通过在定义类时使用泛型参数，可以根据需要将不同类型的数据作为结果进行封装。</p><p>在具体的 API 接口实现中，你可以根据需要选择使用泛型类 <code>Result&lt;T&gt;</code> 或非泛型类 <code>Result</code>。如果接口需要返回特定类型的数据结果，可以使用 <code>Result&lt;T&gt;</code>，并指定泛型参数为对应的数据类型。如果接口不需要返回具体的数据结果，或者需要返回的数据类型是不确定的，可以使用非泛型类 <code>Result</code>。这样可以根据实际情况灵活地选择使用泛型或非泛型的封装类。</p><h3 id="“Controller”"><a href="#“Controller”" class="headerlink" title="“Controller”"></a>“Controller”</h3><p>在”Controllers”的文件夹中添加名为”AdminsControllers”的控制器，包含用于处理API请求的控制器类。</p><p>以下是一个简单的示例，展示了在表示层（MVC）中编写API接口进行增删查改操作的基本实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Web.Http;</span><br><span class="line">using API.Models;</span><br><span class="line">using Models;</span><br><span class="line">using BLL;</span><br><span class="line">using DAL;</span><br><span class="line"></span><br><span class="line">namespace API.Controllers</span><br><span class="line">&#123;</span><br><span class="line">    [RoutePrefix(&quot;Api/Admins&quot;)]</span><br><span class="line">    public class AdminsController : ApiController</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        BLL.B_Admins ba;</span><br><span class="line">        public AdminsController()</span><br><span class="line">        &#123;</span><br><span class="line">            ba = new BLL.B_Admins();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取管理员列表的数据</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;List&quot;)]</span><br><span class="line">        [HttpGet]</span><br><span class="line">        public IHttpActionResult List()</span><br><span class="line">        &#123;</span><br><span class="line">            //var result = new Result&lt;List&lt;Admins&gt;&gt;()</span><br><span class="line">            //&#123;</span><br><span class="line">            //    Data = new B_Admins().GetAll()</span><br><span class="line">            //&#125;;</span><br><span class="line">            //return Json(result);</span><br><span class="line"></span><br><span class="line">            var data = from a in ba.GetAll()</span><br><span class="line">                       select new Products()</span><br><span class="line">                       &#123;</span><br><span class="line">                           ID = a.ID,</span><br><span class="line">                           UserName = a.UserName,</span><br><span class="line">                           PassWord = a.PassWord,</span><br><span class="line">                       &#125;;</span><br><span class="line">            List&lt;Admins&gt; list  = data.ToList();</span><br><span class="line"></span><br><span class="line">            return Ok(new Result&lt;List&lt;Admins&gt;&gt;() &#123; </span><br><span class="line">                Data = list</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 登录</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;管理员名称&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Login&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Login(Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">            var admins = ba.Login(admin.UserName, admin.Password);</span><br><span class="line">            var data = new Admins</span><br><span class="line">            &#123;</span><br><span class="line">                Password = admins.Password,</span><br><span class="line">                UserName = admins.UserName</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var result = new Result&lt;Admins&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Data = data</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            return Json(result);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        ///注册（添加）新的管理员账号</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Reg&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Reg(M_Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">            ba.Add(admin);</span><br><span class="line">            var result = new Result&lt;Admins&gt;();</span><br><span class="line">            return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 更新</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;admin&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Update/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Update(int id, M_Admins admin)</span><br><span class="line">        &#123;</span><br><span class="line">    var data = ba.FindById(id);</span><br><span class="line">    if(data == null)</span><br><span class="line">    &#123;</span><br><span class="line">        return NotFound();</span><br><span class="line">    &#125;</span><br><span class="line">    data.UserName = admin.UserName;</span><br><span class="line">    data.PassWord = admin.PassWord;</span><br><span class="line"></span><br><span class="line">    ba.Update(data);</span><br><span class="line">    return Ok(data);</span><br><span class="line"></span><br><span class="line">            //new BLL.B_Admins().Update(id, admin);</span><br><span class="line">            //var result = new Result&lt;Admins&gt;();</span><br><span class="line">            //return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 删除</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Delete/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpPost]</span><br><span class="line">        public IHttpActionResult Delete(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                ba.Delete(id);</span><br><span class="line">                return Ok(new Result());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                return Ok(new Result()</span><br><span class="line">                &#123;</span><br><span class="line">                    Msg=&quot;删除失败，请联系管理员&quot;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 根据管理员的ID查找并返回对应的管理员信息</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;Find/&#123;id&#125;&quot;)]</span><br><span class="line">        [HttpGet]</span><br><span class="line">        public IHttpActionResult Find(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            var admins = ba.FindById(id);</span><br><span class="line">            var data = new Admins</span><br><span class="line">            &#123;</span><br><span class="line">                id = admins.ID,</span><br><span class="line">                PassWord = admins.PassWord,</span><br><span class="line">                UserName = admins.UserName</span><br><span class="line">            &#125;;</span><br><span class="line">            var result = new Result&lt;Admins&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                Data = data</span><br><span class="line">            &#125;;</span><br><span class="line">            return Json(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 用于支持跨域请求和客户端了解服务器支持的请求方法和选项。</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        [Route(&quot;List&quot;)]</span><br><span class="line">        [Route(&quot;Login&quot;)]</span><br><span class="line">        [Route(&quot;Reg&quot;)]</span><br><span class="line">        [Route(&quot;Update&quot;)]</span><br><span class="line">        [Route(&quot;Delete&quot;)]</span><br><span class="line">        [Route(&quot;Find&quot;)]</span><br><span class="line">        [HttpOptions]</span><br><span class="line">        public IHttpActionResult OPTIONS()</span><br><span class="line">        &#123;</span><br><span class="line">            return Ok();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用EF-MVC-三层架构的方式开发项目我自己的基本思路&quot;&gt;&lt;a href=&quot;#用EF-MVC-三层架构的方式开发项目我自己的基本思路&quot; class=&quot;headerlink&quot; title=&quot;用EF+MVC 三层架构的方式开发项目我自己的基本思路&quot;&gt;&lt;/a&gt;用EF+M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="http://example.com/2023/06/20/SQL/"/>
    <id>http://example.com/2023/06/20/SQL/</id>
    <published>2023-06-20T07:31:12.000Z</published>
    <updated>2023-06-20T09:01:44.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><p>SQL（Structured Query Language）是一种用于管理关系型数据库系统的语言。它是一种标准化的查询语言，用于在数据库中执行各种操作，例如插入、更新、删除和查询数据。</p><p>SQL提供了一组命令和语法规则，使用户能够与数据库进行交互，执行各种操作来管理数据。通过SQL，用户可以创建数据库、创建表格、定义表格之间的关系、插入数据、更新数据、删除数据以及查询数据。</p><p>SQL语言主要包括以下几个方面的功能：</p><p>1、数据定义语言（DDL）：用于定义和管理数据库对象，如创建表格、修改表格结构、删除表格等操作。</p><p>2、数据操纵语言（DML）：用于对数据库中的数据进行操作，如插入数据、更新数据、删除数据等操作。</p><p>3、数据查询语言（DQL）：用于查询数据库中的数据，如使用SELECT语句来获取满足条件的数据。</p><p>4、数据控制语言（DCL）：用于定义用户访问权限和安全性，如授予或撤销用户对数据库对象的访问权限。</p><p>SQL是一种声明性的语言，用户只需要描述所需的数据结果，而不需要指定具体的操作步骤。数据库系统会根据SQL语句的要求来执行相应的操作，并返回结果。</p><p>SQL语言是关系型数据库管理系统（RDBMS）的核心，被广泛应用于各种数据库系统，如MySQL、Oracle、SQL Server、PostgreSQL等。无论是简单的查询还是复杂的数据库操作，SQL语言都是数据库开发和管理的重要工具。</p><h1 id="sql语句基础的存储过程"><a href="#sql语句基础的存储过程" class="headerlink" title="sql语句基础的存储过程"></a>sql语句基础的存储过程</h1><p>SQL（Structured Query Language）是一种用于管理关系数据库系统的语言。存储过程是一组预定义的SQL语句集合，被命名并存储在数据库中，可通过调用执行。存储过程可以接受输入参数，并返回输出参数，它们可以用于执行复杂的数据库操作、处理业务逻辑和提高性能。</p><p>存储过程由一系列SQL语句组成，这些语句可以包括数据的插入、更新、删除等操作，也可以包括查询语句和控制流语句（如条件判断和循环）。存储过程通常用于解决一些复杂的业务需求，可以被应用程序或其他数据库对象调用。</p><p>存储过程的主要优点包括：</p><p>1、代码复用：存储过程可以在多个地方被调用，避免了重复编写相同的代码。<br>2、安全性：存储过程可以设置访问权限，控制用户对数据库的访问。<br>3、性能优化：存储过程在数据库服务器端执行，可以减少网络通信开销，提高执行效率。<br>4、事务控制：存储过程可以作为一个事务单元，保证数据的一致性和完整性。<br>下面是一个简单的SQL存储过程的示例，用于查询指定部门的员工信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE GetEmployeesByDepartment</span><br><span class="line">    @DepartmentID INT  &lt;!--参数类型--&gt;</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT EmployeeID, FirstName, LastName, Email</span><br><span class="line">    FROM Employees   &lt;!--表名--&gt;</span><br><span class="line">    WHERE DepartmentID = @DepartmentID</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>在这个示例中，存储过程名为”GetEmployeesByDepartment”，它接受一个输入参数”@DepartmentID”，用于指定部门ID。存储过程使用SELECT语句从”Employees”表中查询符合条件的员工信息，并返回结果。</p><p>存储过程的使用可以通过调用它的名称，并提供所需的参数来完成。例如，使用以下语句调用上述示例中的存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC GetEmployeesByDepartment @DepartmentID = 1</span><br></pre></td></tr></table></figure><p>这将返回部门ID为1的员工信息。</p><p>存储过程在数据库开发中具有重要的作用，可以提高开发效率、数据安全性和性能。它们适用于处理复杂的业务逻辑和频繁执行的数据库操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是SQL&quot;&gt;&lt;a href=&quot;#什么是SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是SQL&quot;&gt;&lt;/a&gt;什么是SQL&lt;/h1&gt;&lt;p&gt;SQL（Structured Query Language）是一种用于管理关系型数据库系统的语言。它是一种标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2023/06/18/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2023/06/18/%E6%B5%8B%E8%AF%95/</id>
    <published>2023-06-18T10:10:20.000Z</published>
    <updated>2023-06-20T08:11:40.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>图片测试：</p><p><img src="/img/%E4%BE%9D%E8%95%BE%E5%A8%9C-%E7%A7%8B(%E5%8A%A8%E6%80%81).gif"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;p&gt;代码测试：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/06/18/hello-world/"/>
    <id>http://example.com/2023/06/18/hello-world/</id>
    <published>2023-06-18T06:51:03.673Z</published>
    <updated>2023-06-18T06:51:03.674Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
